package com.miguelcr.a01_databasegreendao.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.miguelcr.a01_databasegreendao.model.AlumnoDB;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ALUMNO_DB".
*/
public class AlumnoDBDao extends AbstractDao<AlumnoDB, Long> {

    public static final String TABLENAME = "ALUMNO_DB";

    /**
     * Properties of entity AlumnoDB.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Nombre = new Property(1, String.class, "nombre", false, "NOMBRE");
        public final static Property Edad = new Property(2, Integer.class, "edad", false, "EDAD");
        public final static Property Apellidos = new Property(3, String.class, "apellidos", false, "APELLIDOS");
        public final static Property NotaMedia = new Property(4, Float.class, "notaMedia", false, "NOTA_MEDIA");
        public final static Property ClaseId = new Property(5, long.class, "claseId", false, "CLASE_ID");
    };


    public AlumnoDBDao(DaoConfig config) {
        super(config);
    }
    
    public AlumnoDBDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ALUMNO_DB\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"NOMBRE\" TEXT NOT NULL ," + // 1: nombre
                "\"EDAD\" INTEGER," + // 2: edad
                "\"APELLIDOS\" TEXT," + // 3: apellidos
                "\"NOTA_MEDIA\" REAL," + // 4: notaMedia
                "\"CLASE_ID\" INTEGER NOT NULL );"); // 5: claseId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ALUMNO_DB\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, AlumnoDB entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getNombre());
 
        Integer edad = entity.getEdad();
        if (edad != null) {
            stmt.bindLong(3, edad);
        }
 
        String apellidos = entity.getApellidos();
        if (apellidos != null) {
            stmt.bindString(4, apellidos);
        }
 
        Float notaMedia = entity.getNotaMedia();
        if (notaMedia != null) {
            stmt.bindDouble(5, notaMedia);
        }
        stmt.bindLong(6, entity.getClaseId());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, AlumnoDB entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getNombre());
 
        Integer edad = entity.getEdad();
        if (edad != null) {
            stmt.bindLong(3, edad);
        }
 
        String apellidos = entity.getApellidos();
        if (apellidos != null) {
            stmt.bindString(4, apellidos);
        }
 
        Float notaMedia = entity.getNotaMedia();
        if (notaMedia != null) {
            stmt.bindDouble(5, notaMedia);
        }
        stmt.bindLong(6, entity.getClaseId());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public AlumnoDB readEntity(Cursor cursor, int offset) {
        AlumnoDB entity = new AlumnoDB( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // nombre
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // edad
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // apellidos
            cursor.isNull(offset + 4) ? null : cursor.getFloat(offset + 4), // notaMedia
            cursor.getLong(offset + 5) // claseId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, AlumnoDB entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setNombre(cursor.getString(offset + 1));
        entity.setEdad(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setApellidos(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setNotaMedia(cursor.isNull(offset + 4) ? null : cursor.getFloat(offset + 4));
        entity.setClaseId(cursor.getLong(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(AlumnoDB entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(AlumnoDB entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
